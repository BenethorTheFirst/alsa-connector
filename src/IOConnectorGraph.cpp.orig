#include "IOConnectorGraph.hpp"
#include <QPainter>
#include <QRect>

IOConnectorGraph::IOConnectorGraph(QWidget* parent = 0)
    : QWidget(parent)
{
    setStyleSheet("QWidget { background: #f5f5ee; } ");
    if (parent)
        setGeometry(parent->geometry());
}

void IOConnectorGraph::appendInputNodeGroup(const IOConnectorGraph::NodeGroup nodeGroup)
{
    m_input_node_groups.push_back(nodeGroup);
}

void IOConnectorGraph::appendOutputNodeGroup(const IOConnectorGraph::NodeGroup nodeGroup)
{
    m_output_node_groups.push_back(nodeGroup);
}

void IOConnectorGraph::paintEvent(QPaintEvent* event)
{
    QPainter painter(this);
    const int font_size = 16;
    painter.setFont(QFont("Arial", font_size, QFont::Bold));
    painter.drawText(m_left_rect, Qt::AlignLeft, "Inputs");
    painter.drawText(m_right_rect, Qt::AlignLeft, "Outputs");
    //draw input nodegroups and children
    using NodeGroupV = vector<IOConnectorGraph::NodeGroup>;
    NodeGroupV::const_iterator iter;
    QRect node_rect = m_left_rect;
    for (iter = m_input_node_groups.cbegin();
            iter != m_input_node_groups.cend(); iter++)
    {
        node_rect.moveTop(node_rect.y() + font_size);
        painter.drawText(node_rect, Qt::AlignLeft, iter->name());
    }
    node_rect = m_right_rect;
    //draw output nodegroups and children
    for (iter = m_input_node_groups.cbegin();
            iter != m_input_node_groups.cend(); iter++)
    {
        node_rect.moveTop(node_rect.y() + font_size);
        painter.drawText(node_rect, Qt::AlignLeft, iter->name());
    }
}

void IOConnectorGraph::resizeEvent(QResizeEvent* event)
{
    m_left_rect.setRect(0,0,width()/2,height());
    m_right_rect.setRect(width()/2,0,width()/2,height());
}

IOConnectorGraph::NodeChild::NodeChild(const QString& name)
{
    setName(name);
}

void IOConnectorGraph::NodeChild::setName(const QString& name)
{
    m_name = name;
}

const int IOConnectorGraph::NodeChild::displayY() const
{
    return m_display_y;
}

const QString IOConnectorGraph::NodeGroup::name() const
{
    return m_name;
}


void IOConnectorGraph::NodeGroup::addChild(IOConnectorGraph::NodeChild childNode)
{
    m_child_nodes.push_back(childNode);
}

const int IOConnectorGraph::NodeGroup::status()
{
    return m_status;
}

